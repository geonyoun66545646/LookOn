<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ks55team02.seller.products.mapper.ProductSearchMapper">

    <!-- 필터링된 상품 목록 조회를 위한 ResultMap -->
    <resultMap type="ks55team02.seller.products.domain.Products" id="productsWithFilterResultMap">
        <id column="gds_no" property="gdsNo" />
        <result column="store_id" property="storeId" />
        <result column="ctgry_no" property="ctgryNo" />
        <result column="sel_user_no" property="selUserNo" />
        <result column="mdfr_no" property="mdfrNo" />
        <result column="del_user_no" property="delUserNo" />
        <result column="gds_nm" property="gdsNm" />
        <result column="gds_expln" property="gdsExpln" />
        <result column="bas_prc" property="basPrc" jdbcType="DECIMAL" />
        <result column="dscnt_rt" property="dscntRt" />
        <result column="last_sel_prc" property="lastSelPrc" jdbcType="DECIMAL" />
        <result column="reg_dt" property="regDt" />
        <result column="mdfcn_dt" property="mdfcnDt" />
        <result column="inactvtn_dt" property="inactvtnDt" />
        <result column="expsr_yn" property="expsrYn" />
        <result column="actvtn_yn" property="actvtnYn" />
        <result column="min_purchase_qty" property="minPurchaseQty" />
        <result column="max_purchase_qty" property="maxPurchaseQty" />
        <result column="thumbnail_image_path" property="thumbnailImagePath" />
        <result column="store_name" property="storeName" />
        <result column="total_stock_quantity" property="totalStockQuantity" />
        <result column="is_sold_out" property="isSoldOut" />
        <association property="productCategory" javaType="ks55team02.seller.products.domain.ProductCategory">
            <id property="categoryId" column="pc_ctgry_no" />
            <result property="categoryName" column="pc_ctgry_nm" />
        </association>
    </resultMap>

    <!-- 고객용 상품 목록 조회를 위한 일반 ResultMap -->
    <resultMap type="ks55team02.seller.products.domain.Products" id="activeProductsResultMap">
        <id column="gds_no" property="gdsNo" />
        <result column="store_id" property="storeId" />
        <result column="gds_nm" property="gdsNm" />
        <result column="bas_prc" property="basPrc" jdbcType="DECIMAL" />
        <result column="dscnt_rt" property="dscntRt" />
        <result column="last_sel_prc" property="lastSelPrc" jdbcType="DECIMAL" />
        <result column="thumbnail_image_path" property="thumbnailImagePath" />
        <result column="store_name" property="storeName" />
        <result column="total_stock_quantity" property="totalStockQuantity" />
        <result column="is_sold_out" property="isSoldOut" />
        <association property="productCategory" javaType="ks55team02.seller.products.domain.ProductCategory">
            <id property="categoryId" column="ctgry_no" />
            <result property="categoryName" column="ctgry_nm" />
        </association>
    </resultMap>
	
	<select id="getSpecialSaleProducts" resultMap="activeProductsResultMap">
	    SELECT
	        p.gds_no, p.store_id, p.gds_nm, p.bas_prc,
	        p.dscnt_rt, (p.bas_prc * (100 - IFNULL(p.dscnt_rt, 0.00)) / 100) AS last_sel_prc,
	        pc.ctgry_no AS pc_ctgry_no,   <!-- ⭐ 이 라인을 추가하거나 수정하세요! ⭐ -->
	        pc.ctgry_nm AS pc_ctgry_nm,   <!-- ⭐ 이 라인을 수정하세요! ⭐ -->
	        s.store_conm AS store_name,
	        (
	            SELECT pi.img_file_path_nm
	            FROM product_images pi
	            WHERE pi.gds_no = p.gds_no AND pi.img_type = 1 AND pi.actvtn_yn = TRUE
	            ORDER BY pi.img_indct_sn ASC
	            LIMIT 1
	        ) AS thumbnail_image_path
	    FROM
	        products p
	    LEFT JOIN
	        stores s ON p.store_id = s.store_id
	    LEFT JOIN
        	product_categories pc ON p.ctgry_no = pc.ctgry_no <!-- ⭐ 이 라인이 누락되었을 가능성이 높습니다! 반드시 추가해주세요. ⭐ -->
	    WHERE
	        p.expsr_yn = 1 AND p.actvtn_yn = 1 AND s.del_prcr_yn = FALSE
	        AND p.dscnt_rt >= #{minDiscountRate}  <!-- 30% 이상 조건 -->
	    ORDER BY
	        p.dscnt_rt DESC, p.reg_dt DESC
	    LIMIT 12 <!-- 조회 개수 제한 -->
	</select>
	
	<!-- ⭐ Weekly Best 상품 24개 조회 -->
    <select id="getWeeklyBestProducts" resultMap="productsWithFilterResultMap"> <!-- productsWithFilterResultMap 사용 가정 -->
        SELECT
            p.gds_no, p.store_id, p.ctgry_no, p.gds_nm, p.bas_prc,
	        IFNULL(p.dscnt_rt, 0.00) AS dscnt_rt,
	        (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) AS last_sel_prc, <!-- 할인율 계산 방식 통일 (getFilteredAndSortedProducts와 동일) -->
	        pc.ctgry_no AS pc_ctgry_no,   <!-- ⭐ 이 라인을 추가하거나 수정하세요! ⭐ -->
	        pc.ctgry_nm AS pc_ctgry_nm,   <!-- ⭐ 이 라인을 수정하세요! ⭐ -->
	        s.store_conm AS store_name,
            (
                SELECT pi.img_file_path_nm
                FROM ks55team02db.product_images pi
                WHERE pi.gds_no = p.gds_no AND pi.img_type = 1 AND pi.actvtn_yn = TRUE
                ORDER BY pi.img_indct_sn ASC
                LIMIT 1
            ) AS thumbnail_image_path
        FROM
            ks55team02db.products p
        LEFT JOIN
            ks55team02db.product_categories pc ON p.ctgry_no = pc.ctgry_no
        LEFT JOIN
            stores s ON p.store_id = s.store_id
        WHERE
            p.actvtn_yn = true AND p.expsr_yn = true AND s.del_prcr_yn = FALSE
        ORDER BY
            p.reg_dt DESC
        LIMIT 24
    </select>
	
	<!-- 비슷한 상품 목록 조회 (현재 상품 제외) -->
    <select id="getSimilarProducts" parameterType="map" resultMap="productsWithFilterResultMap"> <!-- ⭐ 여기 변경 ⭐ -->
        SELECT
		    p.gds_no, p.store_id, p.gds_nm, p.bas_prc,
		    p.dscnt_rt, (p.bas_prc * (100 - IFNULL(p.dscnt_rt, 0.00)) / 100) AS last_sel_prc,
		    s.store_conm AS store_name,  <!-- 상점명 -->
            p.ctgry_no AS pc_ctgry_no, <!-- ⭐ 여기 변경: pc_ctgry_no로 별칭 설정 ⭐ -->
            pc.ctgry_nm AS pc_ctgry_nm,  <!-- ⭐ 여기 변경: pc_ctgry_nm으로 별칭 설정 ⭐ -->
            (SELECT pi.img_file_path_nm FROM product_images pi WHERE pi.gds_no = p.gds_no AND pi.img_type = 1 AND pi.actvtn_yn = TRUE ORDER BY pi.img_indct_sn ASC LIMIT 1) AS thumbnail_image_path
		FROM
		    products p
		LEFT JOIN
		    stores s ON p.store_id = s.store_id
        LEFT JOIN
            product_categories pc ON p.ctgry_no = pc.ctgry_no  
		WHERE
		    p.expsr_yn = 1 AND p.actvtn_yn = 1 AND s.del_prcr_yn = FALSE
            AND p.ctgry_no = #{categoryId}
            AND p.gds_no != #{currentGdsNo}
		ORDER BY
            RAND()
        LIMIT 12
    </select>
	
	<!-- 메인 슬라이더용: 최근 등록된 상품 조회 -->
    <select id="getRecentProductsForMain" parameterType="int" resultMap="productsWithFilterResultMap">
        SELECT
            p.gds_no,
            p.gds_nm,
            p.dscnt_rt,
            pc.ctgry_nm AS pc_ctgry_nm,
            (
	            SELECT pi.img_file_path_nm
	            FROM product_images pi
	            WHERE pi.gds_no = p.gds_no AND pi.img_type = 1 AND pi.actvtn_yn = TRUE
	            ORDER BY pi.img_indct_sn ASC
	            LIMIT 1
	        ) AS thumbnail_image_path
        FROM
            products p
        LEFT JOIN
            product_categories pc ON p.ctgry_no = pc.ctgry_no
        WHERE
            p.expsr_yn = 1 AND p.actvtn_yn = 1
        ORDER BY
            p.reg_dt DESC
        LIMIT #{limit}
    </select>
	
	<!-- 고객용: 할인 중인 상품 목록 조회 -->
    <select id="getSaleProducts" resultMap="activeProductsResultMap">
        SELECT
		    p.gds_no, p.store_id, p.gds_nm, p.bas_prc,
		    p.dscnt_rt, (p.bas_prc * (100 - IFNULL(p.dscnt_rt, 0.00)) / 100) AS last_sel_prc,
		    s.store_conm AS store_name,
            (
	            SELECT pi.img_file_path_nm
	            FROM product_images pi
	            WHERE pi.gds_no = p.gds_no AND pi.img_type = 1 AND pi.actvtn_yn = TRUE
	            ORDER BY pi.img_indct_sn ASC
	            LIMIT 1
	        ) AS thumbnail_image_path
		FROM
		    products p
		LEFT JOIN
		    stores s ON p.store_id = s.store_id
		WHERE
		    p.expsr_yn = 1 AND p.actvtn_yn = 1 AND s.del_prcr_yn = FALSE
            AND p.dscnt_rt > 0  <!-- ⭐ 할인율이 0보다 큰 상품만 조회 -->
		ORDER BY
            p.dscnt_rt DESC, p.reg_dt DESC <!-- 할인율 높은 순, 최신 순으로 정렬 -->
    </select>

    <!-- 고객용: 신상품 목록 조회 (수정됨) -->
    <select id="getNewProducts" resultMap="activeProductsResultMap">
        SELECT
		    p.gds_no, p.store_id, p.gds_nm, p.bas_prc,
		    p.dscnt_rt, (p.bas_prc * (100 - IFNULL(p.dscnt_rt, 0.00)) / 100) AS last_sel_prc,
		    s.store_conm AS store_name,
            (
	            SELECT pi.img_file_path_nm
	            FROM product_images pi
	            WHERE pi.gds_no = p.gds_no AND pi.img_type = 1 AND pi.actvtn_yn = TRUE
	            ORDER BY pi.img_indct_sn ASC
	            LIMIT 1
	        ) AS thumbnail_image_path
		FROM
		    products p
		LEFT JOIN
		    stores s ON p.store_id = s.store_id
		WHERE
		    p.expsr_yn = 1 AND p.actvtn_yn = 1 AND s.del_prcr_yn = FALSE
            <!-- ⭐ <if> 태그를 제거하고, 항상 최근 한 달 이내 상품만 조회하도록 수정 -->
            AND p.reg_dt >= DATE_SUB(NOW(), INTERVAL 1 MONTH) 
		ORDER BY
            p.reg_dt DESC
    </select>
	
    <!-- 다양한 필터 및 정렬 조건에 따라 상품 목록 조회 -->
    <select id="getFilteredAndSortedProducts" parameterType="java.util.Map" resultMap="productsWithFilterResultMap">
	    SELECT
	        p.gds_no,
	        p.gds_nm,
	        p.bas_prc,
	        p.ctgry_no,
	        IFNULL(p.dscnt_rt, 0.00) AS dscnt_rt,
	        (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) AS last_sel_prc,
	        pc.ctgry_no AS pc_ctgry_no,
	        pc.ctgry_nm AS pc_ctgry_nm,
	        (
	            SELECT pi.img_file_path_nm
	            FROM product_images pi
	            WHERE pi.gds_no = p.gds_no AND pi.img_type = 1 AND pi.actvtn_yn = TRUE
	            ORDER BY pi.img_indct_sn ASC
	            LIMIT 1
	        ) AS thumbnail_image_path,
	        s.store_conm AS store_name,
	        SUM(ps.sel_psblty_qntty) AS total_stock_quantity,
	        MAX(CASE WHEN ps.sldout_yn = TRUE THEN 1 ELSE 0 END) AS is_sold_out
	    FROM
	        ks55team02db.products p
	    LEFT JOIN
	        ks55team02db.product_categories pc ON p.ctgry_no = pc.ctgry_no
	    LEFT JOIN
	        ks55team02db.stores s ON p.store_id = s.store_id
	    LEFT JOIN
	        ks55team02db.product_status ps ON p.gds_no = ps.gds_no AND ps.actvtn_yn = TRUE
	    
	    <where> p.expsr_yn = 1 AND p.actvtn_yn = 1 AND s.del_prcr_yn = FALSE
	    		<if test="isNewProductPage == true">
		            AND p.reg_dt >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
		        </if>
	        
	        <if test="categoryId != null and categoryId != ''">
	            AND (
	                p.ctgry_no = #{categoryId}
	                OR EXISTS (
	                    SELECT 1
	                    FROM product_categories sub_pc
	                    WHERE sub_pc.ctgry_no = p.ctgry_no
	                    AND sub_pc.up_ctgry_no = #{categoryId}
	                )
	            )
	        </if>
	        
	        <!-- 성별 필터 (옵션 테이블을 통해 조회) -->
	        <if test="gender != null and gender != ''">
	            AND p.gds_no IN (
	                SELECT po.gds_no
	                FROM ks55team02db.product_options po
	                JOIN ks55team02db.product_option_values pov ON po.opt_no = pov.opt_no
	                WHERE
	                    po.opt_nm = '성별'
	                    AND pov.vl_nm IN (#{gender}, '공용') -- '남성'/'여성'과 '공용'을 함께 조회
	                    AND po.actvtn_yn = TRUE AND pov.actvtn_yn = TRUE
	            )
	        </if>
	        
	        <choose>
	            <when test="minPrice != null and maxPrice != null">
	                AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> #{minPrice}
	                AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> #{maxPrice}
	            </when>
	            <when test="minPrice != null"> AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> #{minPrice}
	            </when>
	            <when test="maxPrice != null"> AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> #{maxPrice}
	            </when>
	            <when test="priceRange != null and priceRange != 'all'">
	                AND
	                <choose>
	                    <when test="priceRange == '0-50000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> 50000</when>
	                    <when test="priceRange == '50000-100000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> 50000 AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> 100000</when>
	                    <when test="priceRange == '100000-200000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> 100000 AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> 200000</when>
	                    <when test="priceRange == '200000-300000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> 200000 AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> 300000</when>
	                    <when test="priceRange == '300000-max'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> 300000</when>
	                </choose>
	            </when>
	        </choose>
	        
	        <if test="colors != null and colors.size() > 0">
	            AND p.gds_no IN (
	                SELECT po.gds_no
	                FROM ks55team02db.product_options po
	                JOIN ks55team02db.product_option_values pov ON po.opt_no = pov.opt_no
	                WHERE po.opt_nm = '색상' AND pov.vl_nm IN
	                <foreach item="color" collection="colors" open="(" separator="," close=")">
	                    #{color}
	                </foreach>
	                AND po.actvtn_yn = TRUE AND pov.actvtn_yn = TRUE
	            )
	        </if>
	        
	        <if test="sizes != null and sizes.size() > 0">
	            AND p.gds_no IN (
	                SELECT po.gds_no
	                FROM ks55team02db.product_options po
	                JOIN ks55team02db.product_option_values pov ON po.opt_no = pov.opt_no
	                WHERE (po.opt_nm = '의류 사이즈' OR po.opt_nm = '신발 사이즈' OR po.opt_nm = '사이즈' OR po.opt_nm = '패션소품 사이즈')
	                AND pov.vl_nm IN
	                <foreach item="size" collection="sizes" open="(" separator="," close=")">
	                    #{size}
	                </foreach>
	                AND po.actvtn_yn = TRUE AND pov.actvtn_yn = TRUE
	            )
	        </if>
	        
	        <if test="brands != null and brands.size() > 0">
	            AND s.store_id IN
	            <foreach item="brandId" collection="brands" open="(" separator="," close=")">
	                #{brandId}
	            </foreach>
	        </if>
	        
	        <if test="discountRate != null and discountRate != '' and discountRate != 'all'">
			    AND p.dscnt_rt <![CDATA[ >= ]]> #{discountRate}
			</if>
	    </where>
	    
	    GROUP BY p.gds_no
	    
	    <trim prefix="HAVING" prefixOverrides="AND |OR">
	        <if test="includeSoldOut == null or includeSoldOut == false">
	            SUM(ps.sel_psblty_qntty) > 0
	        </if>
	    </trim>
	    
	    ORDER BY
	        <choose>
	            <when test="sortBy == 'new'">p.reg_dt DESC</when>
	            <when test="sortBy == 'old'">p.reg_dt ASC</when>
	            <when test="sortBy == 'priceAsc'">last_sel_prc ASC</when>
	            <when test="sortBy == 'priceDesc'">last_sel_prc DESC</when>
	            <when test="sortBy == 'popularity'">p.gds_view_cnt DESC</when>
	            <otherwise>p.reg_dt DESC</otherwise>
	        </choose>
	</select>

    <!-- 다양한 필터 조건에 해당하는 상품의 총 개수 조회 -->
    <select id="countFilteredProducts" parameterType="map" resultType="long">
        SELECT
            COUNT(DISTINCT p.gds_no)
        FROM
            ks55team02db.products p
        LEFT JOIN
            ks55team02db.product_categories pc ON p.ctgry_no = pc.ctgry_no
        LEFT JOIN
            ks55team02db.stores s ON p.store_id = s.store_id
        
        <where>
            p.expsr_yn = 1 AND p.actvtn_yn = 1 AND s.del_prcr_yn = FALSE
            
            <if test="isNewProductPage == true">
	            AND p.reg_dt >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
	        </if>
            
            <!-- 카테고리 필터 -->
	        <if test="categoryId != null and categoryId != ''">
	            AND (
	                p.ctgry_no = #{categoryId}
	                OR EXISTS (
	                    SELECT 1
	                    FROM product_categories sub_pc
	                    WHERE sub_pc.ctgry_no = p.ctgry_no
	                    AND sub_pc.up_ctgry_no = #{categoryId}
	                )
	            )
	        </if>
	        
            <!-- 성별 필터 -->
	        <!-- 성별 필터 (옵션 테이블을 통해 조회) -->
	        <if test="gender != null and gender != ''">
	            AND p.gds_no IN (
	                SELECT po.gds_no
	                FROM ks55team02db.product_options po
	                JOIN ks55team02db.product_option_values pov ON po.opt_no = pov.opt_no
	                WHERE
	                    po.opt_nm = '성별'
	                    AND pov.vl_nm IN (#{gender}, '공용')
	                    AND po.actvtn_yn = TRUE AND pov.actvtn_yn = TRUE
	            )
	        </if>
	        
            <!-- 가격 필터 -->
	        <choose>
	            <when test="minPrice != null and maxPrice != null">
	                AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> #{minPrice}
	                AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> #{maxPrice}
	            </when>
	            <when test="minPrice != null">
	                AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> #{minPrice}
	            </when>
	            <when test="maxPrice != null">
	                AND (p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> #{maxPrice}
	            </when>
	            <when test="priceRange != null and priceRange != 'all'">
	                AND
	                <choose>
	                    <when test="priceRange == '0-50000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ <= ]]> 50000</when>
	                    <when test="priceRange == '50000-100000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) BETWEEN 50000 AND 100000</when>
	                    <when test="priceRange == '100000-200000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) BETWEEN 100000 AND 200000</when>
	                    <when test="priceRange == '200000-300000'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) BETWEEN 200000 AND 300000</when>
	                    <when test="priceRange == '300000-max'">(p.bas_prc * (1 - IFNULL(p.dscnt_rt / 100.0, 0.00))) <![CDATA[ >= ]]> 300000</when>
	                </choose>
	            </when>
	        </choose>
	        
            <!-- 색상 필터 -->
	        <if test="colors != null and colors.size() > 0">
	            AND p.gds_no IN (
	                SELECT po.gds_no
	                FROM ks55team02db.product_options po
	                JOIN ks55team02db.product_option_values pov ON po.opt_no = pov.opt_no
	                WHERE po.opt_nm = '색상' AND pov.vl_nm IN
	                <foreach item="color" collection="colors" open="(" separator="," close=")">
	                    #{color}
	                </foreach>
	                AND po.actvtn_yn = TRUE AND pov.actvtn_yn = TRUE
	            )
	        </if>
	        
            <!-- 사이즈 필터 -->
	        <if test="sizes != null and sizes.size() > 0">
	            AND p.gds_no IN (
	                SELECT po.gds_no
	                FROM ks55team02db.product_options po
	                JOIN ks55team02db.product_option_values pov ON po.opt_no = pov.opt_no
	                WHERE (po.opt_nm = '의류 사이즈' OR po.opt_nm = '신발 사이즈' OR po.opt_nm = '사이즈' OR po.opt_nm = '패션소품 사이즈')
	                AND pov.vl_nm IN
	                <foreach item="size" collection="sizes" open="(" separator="," close=")">
	                    #{size}
	                </foreach>
	                AND po.actvtn_yn = TRUE AND pov.actvtn_yn = TRUE
	            )
	        </if>
	        
            <!-- 브랜드 필터 -->
	        <if test="brands != null and brands.size() > 0">
	            AND s.store_id IN
	            <foreach item="brandId" collection="brands" open="(" separator="," close=")">
	                #{brandId}
	            </foreach>
	        </if>
	        
            <!-- 할인율 필터 -->
	        <if test="discountRate != null and discountRate != '' and discountRate != 'all'">
			    AND p.dscnt_rt <![CDATA[ >= ]]> #{discountRate}
			</if>
	        
            <!-- 품절 포함 여부 필터 -->
	        <if test="includeSoldOut == null or includeSoldOut == false">
	            AND p.gds_no IN (
	                SELECT ps_inner.gds_no
	                FROM ks55team02db.product_status ps_inner
	                WHERE ps_inner.actvtn_yn = TRUE
                    GROUP BY ps_inner.gds_no
                    HAVING SUM(ps_inner.sel_psblty_qntty) > 0
	            )
	        </if>
	    </where>
	</select>

    <select id="getAllActiveProductsForCustomer" resultMap="activeProductsResultMap">
        /* 고객용: 활성화되고 노출되는 상품 목록 조회 */
		SELECT
		    p.gds_no,
		    p.store_id,
		    p.ctgry_no,
		    p.sel_user_no,
		    p.mdfr_no,
		    p.del_user_no,
		    p.gds_nm,
		    p.gds_expln,
		    p.bas_prc,
		    IFNULL(p.dscnt_rt, 0.00) AS dscnt_rt,
		    (p.bas_prc * (100 - IFNULL(p.dscnt_rt, 0.00)) / 100) AS last_sel_prc,
		    p.reg_dt,
		    p.mdfcn_dt,
		    p.inactvtn_dt,
		    p.expsr_yn,
		    p.actvtn_yn,
		    p.min_purchase_qty,
		    p.max_purchase_qty,
		    (
		        SELECT pi.img_file_path_nm
		        FROM ks55team02db.product_images pi
		        WHERE pi.gds_no = p.gds_no
		          AND pi.img_type = 1 AND pi.actvtn_yn = TRUE ORDER BY pi.img_indct_sn ASC
		        LIMIT 1
		    ) AS thumbnail_image_path,
		    s.store_conm AS store_name,
		    SUM(ps.sel_psblty_qntty) AS total_stock_quantity,
		    MAX(CASE WHEN ps.sldout_yn = TRUE THEN 1 ELSE 0 END) AS is_sold_out,
		    pc.ctgry_no AS ctgry_no,
		    pc.ctgry_nm AS ctgry_nm
		FROM
		    ks55team02db.products p
		LEFT JOIN
		    ks55team02db.product_categories pc ON p.ctgry_no = pc.ctgry_no
		LEFT JOIN
		    ks55team02db.stores s ON p.store_id = s.store_id
		LEFT JOIN
		    ks55team02db.product_status ps ON p.gds_no = ps.gds_no AND ps.actvtn_yn = TRUE
		WHERE
		    p.expsr_yn = 1 AND p.actvtn_yn = 1 AND s.del_prcr_yn = FALSE
		GROUP BY p.gds_no
		HAVING total_stock_quantity > 0 AND is_sold_out = 0
		ORDER BY p.gds_no DESC
    </select>

    <!-- 고객용: 카테고리별 활성화 및 노출 상품 목록 조회 -->
    <select id="getActiveProductsForCustomerByCategory" parameterType="string" resultMap="activeProductsResultMap">
        <!-- 기존 ProductsMapper.xml에 있던 getActiveProductsForCustomerByCategory 쿼리 내용 전체를 여기에 복사-붙여넣기 -->
        <!-- resultMap을 "activeProductsResultMap"으로 변경 -->
        /* 고객용: 카테고리별 활성화 및 노출 상품 목록 조회 */
		SELECT
		    p.gds_no,
		    p.store_id,
		    p.ctgry_no,
		    p.sel_user_no,
		    p.mdfr_no,
		    p.del_user_no,
		    p.gds_nm,
		    p.gds_expln,
		    p.bas_prc,
		    IFNULL(p.dscnt_rt, 0.00) AS dscnt_rt,
		    (p.bas_prc * (100 - IFNULL(p.dscnt_rt, 0.00)) / 100) AS last_sel_prc,
		    p.reg_dt,
		    p.mdfcn_dt,
		    p.inactvtn_dt,
		    p.expsr_yn,
		    p.actvtn_yn,
		    p.min_purchase_qty,
		    p.max_purchase_qty,
		    (
		        SELECT pi.img_file_path_nm
		        FROM ks55team02db.product_images pi
		        WHERE pi.gds_no = p.gds_no
		          AND pi.img_type = 1 AND pi.actvtn_yn = TRUE
		        ORDER BY pi.img_indct_sn ASC
		        LIMIT 1
		    ) AS thumbnail_image_path,
		    s.store_conm AS store_name,
		    SUM(ps.sel_psblty_qntty) AS total_stock_quantity,
		    MAX(CASE WHEN ps.sldout_yn = TRUE THEN 1 ELSE 0 END) AS is_sold_out,
		    pc.ctgry_no AS ctgry_no,
		    pc.ctgry_nm AS ctgry_nm
		FROM
		    ks55team02db.products p
		LEFT JOIN
		    ks55team02db.product_categories pc ON p.ctgry_no = pc.ctgry_no
		LEFT JOIN
		    ks55team02db.stores s ON p.store_id = s.store_id
		LEFT JOIN
		    ks55team02db.product_status ps ON p.gds_no = ps.gds_no AND ps.actvtn_yn = TRUE
		WHERE
		    p.expsr_yn = 1             
		    AND p.actvtn_yn = 1        
		    AND s.del_prcr_yn = FALSE 
		    AND p.ctgry_no = #{categoryId} GROUP BY p.gds_no
		HAVING total_stock_quantity > 0 AND is_sold_out = 0
		ORDER BY p.gds_no DESC
    </select>

</mapper>