<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

    <mapper namespace="ks55team02.customer.cart.mapper.CartMapper">

        <!-- CartDTO와 DB 컬럼 매핑을 위한 resultMap 정의 -->
        <!-- CartDTO의 camelCase 필드명에 맞게 property 속성 수정 -->
        <resultMap id="cartDTOResultMap" type="ks55team02.customer.cart.domain.CartDTO">
            <id 	column="cart_item_id" 	property="cartItemId"/>
            <result column="user_no" 		property="userNo"/>
            <result column="gds_no" 		property="gdsNo"/>
            <result column="store_id" 		property="storeId"/>
            <result column="opt_no" 		property="optNo"/>
            <result column="quantity" 		property="quantity"/>
            <result column="added_at" 		property="addedAt"/>
            <result column="updated_at" 	property="updatedAt"/>
            <result column="is_chc_ord" 	property="isChcOrd"/>
            <!-- products 테이블에서 가져오는 상품명과 최종 판매가 매핑 추가 -->
            <result column="gds_nm" 		property="gdsNm"/>
            <result column="last_sel_prc" 	property="gdsPrc"/> <!-- products.last_sel_prc를 CartDTO.gdsPrc에 매핑 -->
            <!-- product_options 테이블에서 가져오는 옵션명과 옵션 가격 매핑 추가 -->
            <result column="opt_nm" 		property="optNm"/>
            <result column="opt_prc" 		property="optPrc"/>
        </resultMap>

        <!-- 사용자 번호로 장바구니 목록을 조회하는 쿼리 -->
        <!-- cart_items, products, product_options 테이블을 조인하여 상품 및 옵션 정보 포함 -->
        <select id="selectCartItemsByUserNo" parameterType="String" resultMap="cartDTOResultMap">
        SELECT
            ci.cart_item_id,
            ci.user_no,
            ci.gds_no,
            ci.store_id,
            ci.opt_no,
            ci.quantity,
            ci.added_at,
            ci.updated_at,
            ci.is_chc_ord,
            p.gds_nm,          -- 상품 이름 (products 테이블 조인)
            p.last_sel_prc,    -- 상품 최종 판매가 (products 테이블 조인)
            po.opt_nm          -- 옵션 이름 (product_options 테이블 조인)
            FROM
            cart_items ci
        JOIN
            products p ON ci.gds_no = p.gds_no
        LEFT JOIN
            product_options po ON ci.opt_no = po.opt_no
        WHERE
            ci.user_no = #{userNo}
        ORDER BY
            ci.added_at DESC
    </select>

        <!-- 특정 사용자의 장바구니에 이미 동일한 상품(옵션까지)이 있는지 조회하는 쿼리 -->
        <select id="getExistingCartItem" parameterType="map" resultMap="cartDTOResultMap">
            SELECT
                cart_item_id, user_no, gds_no, store_id, opt_no, quantity, added_at, updated_at, is_chc_ord
            FROM
                cart_items
            WHERE
                user_no = #{userNo}
                AND gds_no = #{gdsNo}
                AND store_id = #{storeId}
                <if test="optNo != null and optNo != ''">
                    AND opt_no = #{optNo}
                </if>
                <if test="optNo == null or optNo == ''">
                    AND opt_no IS NULL
                </if>
        </select>

        <!-- 새로운 장바구니 항목을 추가하는 쿼리 -->
        <insert id="insertCartItem" parameterType="ks55team02.customer.cart.domain.CartDTO">
            INSERT INTO cart_items (
                cart_item_id, user_no, gds_no, store_id, opt_no, quantity, added_at, is_chc_ord
            ) VALUES (
                #{cartItemId}, #{userNo}, #{gdsNo}, #{storeId}, #{optNo}, #{quantity}, #{addedAt}, #{isChcOrd}
            )
        </insert>

        <!-- 장바구니 항목의 수량을 업데이트하는 쿼리 -->
        <update id="updateCartItemQuantity" parameterType="ks55team02.customer.cart.domain.CartDTO">
            UPDATE cart_items
            SET
                quantity = #{quantity},
                updated_at = #{updatedAt}
            WHERE
                cart_item_id = #{cartItemId}
        </update>

        <!-- 장바구니 항목 ID로 단일 항목을 조회하는 쿼리 -->
        <select id="getCartItemById" parameterType="String" resultMap="cartDTOResultMap">
            SELECT
                cart_item_id, user_no, gds_no, store_id, opt_no, quantity, added_at, updated_at, is_chc_ord
            FROM
                cart_items
            WHERE
                cart_item_id = #{cartItemId}
        </select>

        <!-- 특정 장바구니 항목을 삭제하는 쿼리 -->
        <delete id="deleteCartItem" parameterType="String">
            DELETE FROM
                cart_items
            WHERE
                cart_item_id = #{cartItemId}
        </delete>

        <!-- 특정 사용자 번호에 해당하는 장바구니의 모든 항목을 삭제하는 쿼리 -->
        <delete id="clearCartByUserNo" parameterType="String">
            DELETE FROM
                cart_items
            WHERE
                user_no = #{userNo}
        </delete>

    </mapper>
    