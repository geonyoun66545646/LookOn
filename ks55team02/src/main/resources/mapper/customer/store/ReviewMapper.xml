<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ks55team02.customer.store.mapper.ReviewMapper">

    <!-- ================================================================= -->
    <!--                       [ RESULT MAPS ]                           -->
    <!-- ================================================================= -->
    <resultMap id="productReviewResultMap" type="ks55team02.common.domain.store.ProductReview">
        <id property="reviewId"         column="review_id"/>
        <result property="ordrDtlArtclNo" column="ordr_dtl_artcl_no"/>
        <result property="prchsrUserNo"   column="prchsr_user_no"/>
        <result property="gdsNo"          column="gds_no"/>
        <result property="ordrNo"         column="ordr_no"/>
        <result property="evlScr"         column="evl_scr"/>
        <result property="reviewCn"       column="review_cn"/>
        <result property="wrtYmd"         column="wrt_ymd"/>
        <result property="reviewStts"     column="review_stts"/>
        <result property="lastMdfcnDt"    column="last_mdfcn_dt"/>
        <result property="delDt"          column="del_dt"/>
        <result property="delPrcrNo"      column="del_prcr_no"/>
        <result property="helpdCnt"       column="helpd_cnt"/>
        <result property="isLiked"        column="is_liked"/>
        <association property="user" javaType="ks55team02.common.domain.inquiry.InquiryUser">
            <id property="userNo"     column="user_no"/>
            <result property="userNm"   column="user_nm"/>
            <result property="userNcnm" column="user_ncnm"/>
        </association>
        <association property="userProfile" javaType="ks55team02.customer.register.domain.UserProfile">
            <id property="userNo"     column="user_no"/>
            <result property="prflImg"  column="prfl_img"/>
        </association>
        <collection property="reviewImages" ofType="ks55team02.common.domain.store.ReviewImage">
            <id property="reviewImgId"  column="review_img_id"/>
            <result property="imgId"      column="img_id"/>
            <result property="ord"        column="ord"/>
            <association property="storeImage" javaType="ks55team02.common.domain.store.StoreImage">
                <id property="imgId"     column="img_id"/>
                <result property="imgAddr"   column="img_addr"/>
                <result property="imgFileNm" column="img_file_nm"/>
            </association>
        </collection>
    </resultMap>

   <!-- reviewMapper.xml -->
<!-- ================================================================= -->
    <!--         [ '좋아요' 관련 CRUD - UPSERT 최종 완성본 ]               -->
    <!-- ================================================================= -->

    <!-- '좋아요' ID의 최대 숫자값 조회 (review_likes 테이블 대상) -->
    <select id="findMaxLikeIdNumber" resultType="Integer">
        SELECT MAX(CAST(SUBSTRING_INDEX(like_id, '_', -1) AS UNSIGNED))
        FROM review_likes
    </select>
    
    <!-- 
      [UPSERT 쿼리]
      - INSERT를 시도하고, uk_review_user_like UNIQUE KEY가 중복되면 ON DUPLICATE KEY UPDATE 구문이 실행됩니다.
      - 이 모든 과정은 DB에서 원자적으로 처리되어 동시성 문제가 발생하지 않습니다.
    -->
    <insert id="upsertLike" parameterType="ks55team02.common.domain.store.ReviewLike">
        INSERT INTO review_likes
            (like_id, review_id, like_user_no, like_yn, like_ymd)
        VALUES
            (#{likeId}, #{reviewId}, #{likeUserNo}, TRUE, NOW())
        ON DUPLICATE KEY UPDATE
            rtrcn_dt = IF(like_yn, NOW(), NULL),
            like_yn = NOT like_yn
    </insert>

    <!-- UPSERT 작업 후, 최종 상태를 확인하기 위한 간단한 조회 쿼리 -->
    <select id="findLikeStatusByUser" resultType="boolean">
        SELECT like_yn
        FROM review_likes
        WHERE review_id = #{reviewId} AND like_user_no = #{userNo}
    </select>

    <!-- '좋아요' 개수 카운트 (like_yn = TRUE 인 것만) -->
    <select id="countLikesByReviewId" resultType="int">
        SELECT COUNT(*)
        FROM review_likes
        WHERE review_id = #{reviewId} AND like_yn = TRUE
    </select>
    
    <!-- ================================================================= -->
    <!--             [ 페이지네이션 및 리뷰 목록 조회 (최적화) ]              -->
    <!-- ================================================================= -->

    <select id="findReviewIdsByGdsNo" resultType="string">
        SELECT review_id
        FROM ks55team02db.product_reviews
        WHERE gds_no = #{gdsNo} AND review_stts = 1
        ORDER BY wrt_ymd DESC
        LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="findReviewsByIds" parameterType="map" resultMap="productReviewResultMap">
        SELECT
            pr.review_id, pr.ordr_dtl_artcl_no, pr.prchsr_user_no, pr.gds_no, pr.ordr_no,
            pr.evl_scr, pr.review_cn, pr.wrt_ymd, pr.review_stts, pr.last_mdfcn_dt,
            pr.del_dt, pr.del_prcr_no,
            u.user_ncnm, u.user_nm,
            up.prfl_img,
            ri.review_img_id, ri.img_id, ri.ord,
            si.img_addr, si.img_file_nm,
            (SELECT COUNT(*) FROM review_likes WHERE review_id = pr.review_id AND like_yn = TRUE) AS helpd_cnt,
            <if test="currentUserNo != null and currentUserNo != ''">
                EXISTS (SELECT 1 FROM review_likes WHERE review_id = pr.review_id AND like_user_no = #{currentUserNo} AND like_yn = TRUE)
            </if>
            <if test="currentUserNo == null or currentUserNo == ''">
                FALSE
            </if>
            AS is_liked
        FROM
            ks55team02db.product_reviews AS pr
        JOIN
            ks55team02db.users AS u ON pr.prchsr_user_no = u.user_no
        LEFT JOIN
            ks55team02db.user_profiles AS up ON u.user_no = up.user_no
        LEFT JOIN
            ks55team02db.review_images AS ri ON pr.review_id = ri.review_id
        LEFT JOIN
            ks55team02db.store_images AS si ON ri.img_id = si.img_id
        WHERE
            pr.review_id IN
            <foreach item="reviewId" collection="reviewIdList" open="(" separator="," close=")">
                #{reviewId}
            </foreach>
        ORDER BY
            pr.wrt_ymd DESC, ri.ord ASC
    </select>

    <select id="getReviewCountByGdsNo" parameterType="String" resultType="long">
        SELECT COUNT(*)
        FROM ks55team02db.product_reviews
        WHERE gds_no = #{gdsNo} AND review_stts = 1
    </select>

    <!-- ================================================================= -->
    <!--                        [ 리뷰 작성 관련 ]                         -->
    <!-- ================================================================= -->

    <select id="findReviewableOrderItem" resultType="String">
        SELECT oi.ordr_dtl_artcl_no
        FROM orders o JOIN order_items oi ON o.ordr_no = oi.ordr_no
        WHERE o.user_no = #{userNo}
            AND o.ordr_no = #{ordrNo}
            AND oi.gds_no = #{gdsNo}
            AND oi.ordr_dtl_artcl_dcsn_cd = 'ORDERED'
        LIMIT 1
    </select>

    <select id="countReviewByOrderItem" resultType="int">
        SELECT COUNT(*)
        FROM product_reviews
        WHERE ordr_dtl_artcl_no = #{ordrDtlArtclNo}
    </select>

    <insert id="insertReview" parameterType="ks55team02.common.domain.store.ProductReview">
        INSERT INTO product_reviews (
            review_id, ordr_dtl_artcl_no, prchsr_user_no, gds_no, ordr_no,
            evl_scr, review_cn, review_stts, wrt_ymd, helpd_cnt
        ) VALUES (
            #{reviewId}, #{ordrDtlArtclNo}, #{prchsrUserNo}, #{gdsNo}, #{ordrNo},
            #{evlScr}, #{reviewCn}, '1', NOW(), 0
        )
    </insert>

    <select id="findMaxReviewIdNumber" resultType="Integer">
        SELECT MAX(CAST(SUBSTRING_INDEX(review_id, '_', -1) AS UNSIGNED))
        FROM product_reviews
    </select>

    <select id="findReviewableOrder" resultType="ks55team02.orderproduct.domain.OrderDTO">
        SELECT
            O.ordr_no AS ordrNo,
            O.ordr_dt AS ordrDt
        FROM
            orders O
        INNER JOIN
            order_items OI ON O.ordr_no = OI.ordr_no
        WHERE
            O.user_no = #{userNo}
            AND OI.gds_no = #{gdsNo}
            AND OI.ordr_dtl_artcl_dcsn_cd = 'ORDERED'
            AND NOT EXISTS (
                SELECT 1 FROM product_reviews PR WHERE PR.ordr_dtl_artcl_no = OI.ordr_dtl_artcl_no
            )
        ORDER BY
            O.ordr_dt DESC
        LIMIT 1
    </select>

    <insert id="addStoreImages" parameterType="java.util.List">
        INSERT INTO store_images (
            img_id, img_file_nm, img_addr, img_file_sz, img_type_cd, reg_ymd, del_yn
        ) VALUES
        <foreach collection="list" item="storeImage" separator=",">
            (
                #{storeImage.imgId}, #{storeImage.imgFileNm}, #{storeImage.imgAddr}, #{storeImage.imgFileSz},
                #{storeImage.imgTypeCd}, #{storeImage.regYmd}, #{storeImage.delYn}
            )
        </foreach>
    </insert>

    <insert id="addReviewImages" parameterType="java.util.List">
        INSERT INTO review_images (
            review_img_id, review_id, img_id, ord
        ) VALUES
        <foreach collection="list" item="reviewImage" separator=",">
            (
                #{reviewImage.reviewImgId}, #{reviewImage.reviewId}, #{reviewImage.imgId}, #{reviewImage.ord}
            )
        </foreach>
    </insert>
    
</mapper>