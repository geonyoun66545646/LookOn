<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="ks55team02.admin.adminpage.storeadmin.appadmin.mapper.AppAdminMapper">

	<resultMap id="appAdminResultMap" 		type="ks55team02.common.domain.store.AppStore">
        <id property="aplyId" 					column="aply_id"/>
		<result property="aplyUserNo" 			column="aply_user_no"/>
		<result property="storeNm" 				column="store_nm"/>
		<result property="brnoImgId" 			column="brno_img_id"/>
		<result property="cmmDclrImgId" 		column="cmm_dclr_img_id"/>
		<result property="selGdsProofImgId" 	column="sel_gds_proof_img_id"/>
		<result property="rrnoCardCopyImgId" 	column="rrno_card_copy_img_id"/>
		<result property="bankbookCopyImgId" 	column="bankbook_copy_img_id"/>
		<result property="etcDocImgId" 			column="etc_doc_img_id"/>
		<result property="plcyId" 				column="plcy_id"/>
		<result property="ctrtAplyYmd" 			column="ctrt_aply_ymd"/>
		<result property="ctrtTermVal" 			column="ctrt_term_val"/>
		<result property="rvwMngrNo" 			column="rvw_mngr_no"/>
		<result property="mngrNm" 				column="mngr_nm"/>
		<result property="mngrEml" 				column="mngr_eml"/>
		<result property="mngrTelNo" 			column="mngr_tel_no"/>
		<result property="bplcAddr" 			column="bplc_addr"/>
		<result property="aplyStts" 			column="aply_stts"/>
		<result property="aprvRjctRsn" 			column="aprv_rjct_rsn"/>
		<result property="brno" 				column="brno"/>
		<result property="storeLogoImg" 		column="store_logo_img"/>
		<result property="lastMdfcnDt" 			column="last_mdfcn_dt"/>
		<result property="bankNm" 				column="bank_nm"/>
   		<result property="actno" 				column="act_no"/>
   		<result property="dpstrNm" 				column="dpstr_nm"/>
   		<result property="storeIntroCn" 		column="store_intro_cn"/>
		<association property="user" javaType="ks55team02.common.domain.inquiry.InquiryUser">
           <!-- users 테이블의 컬럼을 InquiryUser 객체의 필드에 매핑 -->
           <id property="userNo" column="user_no"/>
           <result property="userNm" column="user_nm"/>
           <result property="emlAddr" column="eml_addr"/>
           <result property="telno" column="telno"/>
           <result property="userLgnId" column="user_lgn_id"/>
        </association>
	</resultMap>
		
	<select id="getAppAdminCount" parameterType="ks55team02.common.domain.store.AppStore" resultType="int">
    SELECT
        COUNT(*)
    FROM
        store_application sa
    INNER JOIN
        users u ON sa.aply_user_no = u.user_no
    <where>
        <if test="searchValue != null and searchValue != ''">
            <choose>
                <when test="searchKey == 'aplyId'">
                    sa.aply_id LIKE CONCAT('%', #{searchValue}, '%')
                </when>
                <when test="searchKey == 'storeNm'">
                    sa.store_nm LIKE CONCAT('%', #{searchValue}, '%')
                </when>
                <when test="searchKey == 'userNm'">
                    u.user_nm LIKE CONCAT('%', #{searchValue}, '%')
                </when>
                <when test="searchKey == 'aplyStts'">
                    sa.aply_stts LIKE CONCAT('%', #{searchValue}, '%')
                </when>
                <when test="searchKey == 'aplyUserNo'">
                    sa.aply_user_no LIKE CONCAT('%', #{searchValue}, '%')
                </when>
                <when test="searchKey == null or searchKey == ''">
                    (
                        sa.aply_id LIKE CONCAT('%', #{searchValue}, '%') OR
                        sa.store_nm LIKE CONCAT('%', #{searchValue}, '%') OR
                        u.user_nm LIKE CONCAT('%', #{searchValue}, '%') OR
                        sa.aply_user_no LIKE CONCAT('%', #{searchValue}, '%')
                    )
                </when>
            </choose>
        </if>
        <if test="startDate != null and endDate != null">
            AND sa.ctrt_aply_ymd BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="filterConditions != null and filterConditions.size > 0">
            AND sa.aply_stts IN
            <foreach item="condition" collection="filterConditions" open="(" separator="," close=")">
                #{condition}
            </foreach>
        </if>
        <if test="levels != null and levels.size > 0">
            AND sa.some_level_column IN
            <foreach item="level" collection="levels" open="(" separator="," close=")">
                #{level}
            </foreach>
        </if>
    </where>
</select>
	
	<select id="getAppAdminList" parameterType="ks55team02.common.domain.store.AppStore" resultMap="appAdminResultMap">
    SELECT
        sa.aply_id,
        sa.aply_user_no,
        sa.store_nm,
        sa.brno_img_id,
        sa.cmm_dclr_img_id,
        sa.sel_gds_proof_img_id,
        sa.rrno_card_copy_img_id,
        sa.bankbook_copy_img_id,
        sa.etc_doc_img_id,
        sa.plcy_id,
        sa.ctrt_aply_ymd,
        sa.ctrt_term_val,
        sa.rvw_mngr_no,
        sa.mngr_nm,
        sa.mngr_eml,
        sa.mngr_tel_no,
        sa.bplc_addr,
        sa.aply_stts,
        sa.aprv_rjct_rsn,
        sa.brno,
        sa.bank_nm,
        sa.act_no,
        sa.dpstr_nm,
 	    sa.store_logo_img,
 	    sa.store_intro_cn,
        u.user_nm,
        u.user_no,
        u.user_lgn_id
    FROM
        store_application sa
    INNER JOIN
        users u ON sa.aply_user_no = u.user_no
    <where>
        <if test="appStore.searchValue != null and appStore.searchValue != ''">
            <choose>
                <when test="appStore.searchKey == 'aplyId'">
                    sa.aply_id LIKE CONCAT('%', #{appStore.searchValue}, '%')
                </when>
                <when test="appStore.searchKey == 'storeNm'">
                    sa.store_nm LIKE CONCAT('%', #{appStore.searchValue}, '%')
                </when>
                <when test="appStore.searchKey == 'userNm'">
                    u.user_nm LIKE CONCAT('%', #{appStore.searchValue}, '%')
                </when>
                <when test="appStore.searchKey == 'aplyStts'">
                    sa.aply_stts LIKE CONCAT('%', #{appStore.searchValue}, '%')
                </when>
                <when test="appStore.searchKey == 'aplyUserNo'">
                    sa.aply_user_no LIKE CONCAT('%', #{appStore.searchValue}, '%')
                </when>
                <when test="appStore.searchKey == null or appStore.searchKey == ''">
                    (
                        sa.aply_id LIKE CONCAT('%', #{appStore.searchValue}, '%') OR
                        sa.store_nm LIKE CONCAT('%', #{appStore.searchValue}, '%') OR
                        u.user_nm LIKE CONCAT('%', #{appStore.searchValue}, '%') OR
                        sa.aply_user_no LIKE CONCAT('%', #{appStore.searchValue}, '%')
                    )
                </when>
            </choose>
        </if>
        <if test="appStore.startDate != null and appStore.endDate != null">
            AND sa.ctrt_aply_ymd BETWEEN #{appStore.startDate} AND #{appStore.endDate}
        </if>
        <if test="appStore.filterConditions != null and appStore.filterConditions.size > 0">
            AND sa.aply_stts IN
            <foreach item="condition" collection="appStore.filterConditions" open="(" separator="," close=")">
                #{condition}
            </foreach>
        </if>
        <if test="appStore.levels != null and appStore.levels.size > 0">
            AND sa.some_level_column IN
            <foreach item="level" collection="appStore.levels" open="(" separator="," close=")">
                #{level}
            </foreach>
        </if>
    </where>
    ORDER BY
        <choose>
            <when test="appStore.sortKey == 'aplyId'">
            CAST(sa.aply_id AS UNSIGNED) <if test="appStore.sortOrder == 'ASC'">ASC</if><if test="appStore.sortOrder == 'DESC'">DESC</if>
            </when>
            <when test="appStore.sortKey == 'storeNm'"> sa.store_nm <if test="appStore.sortOrder == 'ASC'">ASC</if><if test="appStore.sortOrder == 'DESC'">DESC</if>
            </when>
            <when test="appStore.sortKey == 'userNm'"> u.user_nm <if test="appStore.sortOrder == 'ASC'">ASC</if><if test="appStore.sortOrder == 'DESC'">DESC</if>
            </when>
            <when test="appStore.sortKey == 'ctrtAplyYmd'"> sa.ctrt_aply_ymd <if test="appStore.sortOrder == 'ASC'">ASC</if><if test="appStore.sortOrder == 'DESC'">DESC</if>
            </when>
            <otherwise>
                CAST(REGEXP_SUBSTR(sa.aply_id, '[0-9]+') AS UNSIGNED) DESC
            </otherwise>
        </choose>
        LIMIT #{limitStart}, #{pageSize}
</select>
		
	<select id="getAppAdminById" parameterType="String" resultMap="appAdminResultMap">
		SELECT 
			sa.aply_id, 
			sa.aply_user_no, 
			sa.store_nm,
			sa.brno_img_id, 
			sa.cmm_dclr_img_id, 
			sa.sel_gds_proof_img_id, 
			sa.rrno_card_copy_img_id, 
			sa.bankbook_copy_img_id, 
			sa.etc_doc_img_id, plcy_id, 
			sa.ctrt_aply_ymd,  
			sa.ctrt_term_val, 
			sa.rvw_mngr_no, 
			sa.mngr_nm, 
			sa.mngr_eml, 
			sa.mngr_tel_no, 
			sa.bplc_addr, 
			sa.aply_stts, 
			sa.aprv_rjct_rsn,
			sa.brno,
			sa.store_logo_img,
			sa.bank_nm,
			sa.act_no,
			sa.dpstr_nm,
			sa.store_intro_cn,
			u.user_no,    -- users 테이블 컬럼 명시
            u.user_nm,    -- users 테이블 컬럼 명시
            u.eml_addr,   -- users 테이블 컬럼 명시
            u.telno       -- users 테이블 컬럼 명시
		FROM
			store_application sa inner join users u 
			on sa.aply_user_no = u.user_no
		where
			sa.aply_id = #{aplyId}
	</select>
	
	 <!-- 상점신청 상태 변경 메소드  -->
    <update id="updateAppStatus" parameterType="ks55team02.common.domain.store.AppStore">
        UPDATE 
            store_application
        SET
            aply_stts = #{aplyStts},
            aprv_rjct_rsn = #{aprvRjctRsn},
            last_mdfcn_dt = NOW()
        WHERE
            aply_id = #{aplyId}
    </update>
    
     <!-- stores 테이블 INSERT 쿼리 -->
    <insert id="insertStore" parameterType="ks55team02.common.domain.store.Store">
        INSERT INTO stores (
            store_id, 
            aply_id, 
            seller_user_no, 
            store_conm, 
            store_intro_cn, 
            store_logo_img, 
            store_stts,
            info_mdfcn_dt
        ) VALUES (
            #{storeId}, 
            #{aplyId}, 
            #{sellerUserNo}, 
            #{storeConm}, 
            #{storeIntroCn}, 
            #{storeLogoImg}, 
            'ACTIVE',  -- 상점 상태는 'ACTIVE' (활성)으로 기본 설정
            NOW()
        )
    </insert>
    
     <!-- store_account 테이블 INSERT 쿼리 -->
    <insert id="insertStoreAccount" parameterType="ks55team02.common.domain.store.StoreAccount">
        INSERT INTO store_account (
            actno_id, 
            store_id, 
            bank_nm, 
            actno, 
            dpstr_nm, 
            main_actno_yn, 
            actvtn_yn
        ) VALUES (
            #{actnoId}, 
            #{storeId}, 
            #{bankNm}, 
            #{actno}, 
            #{dpstrNm}, 
            1,  -- 주계좌 여부 (기본값: true)
            1   -- 활성 여부 (기본값: true)
        )
    </insert>
    
     <!-- stores 테이블에서 최대 ID의 숫자 부분 추출 -->
    <select id="selectMaxStoreIdNum" resultType="int">
        SELECT 
            MAX(CAST(SUBSTRING_INDEX(store_id, '_', -1) AS UNSIGNED)) 
        FROM 
            stores
    </select>

    <!-- store_account 테이블에서 최대 ID의 숫자 부분 추출 -->
    <select id="selectMaxAccountIdNum" resultType="int">
        SELECT 
            MAX(CAST(SUBSTRING_INDEX(actno_id, '_', -1) AS UNSIGNED)) 
        FROM 
            store_account
    </select>
    
    <update id="updateUserGrade">
        UPDATE 
            users
        SET
            mbr_grd_cd = #{mbrGrdCd}
        WHERE
            user_no = #{userNo}
    </update>
	
</mapper>
